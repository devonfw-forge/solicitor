// SPDX-License-Identifier: Apache-2.0

template header
clientName
engagementName
applicationName
groupId
artifactId
version
declaredLicense
url
normalizedLicenseType
normalizedLicense
normalizedLicenseUrl
comment


package com.devonfw.tools.solicitor.rules;

import com.devonfw.tools.solicitor.model.inventory.NormalizedLicense;
import com.devonfw.tools.solicitor.model.inventory.RawLicense;
import com.devonfw.tools.solicitor.model.inventory.ApplicationComponent;
import com.devonfw.tools.solicitor.model.masterdata.Application;
import com.devonfw.tools.solicitor.model.masterdata.Engagement;
import com.devonfw.tools.solicitor.ruleengine.drools.AuditEntryBuilder;
import com.devonfw.tools.solicitor.ruleengine.drools.ModelHelper;


template "License Assignment"

rule "License Assignment @{row.rowNumber} - mark RawLicense as done by specialHandling" salience -@{row.rowNumber}
    when
    	// make sure that the main conditions given here are the same as in the below rule
        $e : Engagement( 
        	clientName == "@{clientName}", 
        	engagementName == "@{engagementName}",
        	$name :  engagementName )
        $a : Application( 
        	name == "@{applicationName}", 
        	engagement == $e )
        $ac : ApplicationComponent(
        	groupId == "@{groupId}", 
        	artifactId == "@{artifactId}", 
        	version == "@{version}",
        	application == $a )
        $rl : RawLicense( 
            specialHandling == false,						// differs from below rule: it should only fire once per RawLicense
        	declaredLicense == "@{declaredLicense}",
        	$licUrl : licenseUrl,
        	licenseUrl == "@{url}", 
        	applicationComponent == $ac )
    then
        $rl.setSpecialHandling(true);
        update($rl);
       
end

rule "License Assignment @{row.rowNumber} - add given NormalizedLicense" salience -@{row.rowNumber}
    when
        $e : Engagement( 
        	clientName == "@{clientName}", 
        	engagementName == "@{engagementName}",
        	$name :  engagementName )
        $a : Application( 
        	name == "@{applicationName}", 
        	engagement == $e )
        $ac : ApplicationComponent(
        	groupId == "@{groupId}", 
        	artifactId == "@{artifactId}", 
        	version == "@{version}",
        	application == $a )
        $rl : RawLicense(  
        	declaredLicense == "@{declaredLicense}",
        	$licUrl : licenseUrl,
        	licenseUrl == "@{url}", 
        	applicationComponent == $ac )
        not( NormalizedLicense(applicationComponent == $ac, normalizedLicense == "@{normalizedLicense}") )  // differs from above
        	
    then
        NormalizedLicense normalizedLicense = ModelHelper.newNormalizedLicense($rl );
        normalizedLicense.setNormalizedLicenseType("@{normalizedLicenseType}");
        normalizedLicense.setNormalizedLicense("@{normalizedLicense}"); 
        normalizedLicense.setNormalizedLicenseUrl($licUrl);
 		normalizedLicense.setNormalizedLicenseUrl( "@{normalizedLicenseUrl}" ); 
        ModelHelper.addCommentToNormalizedLicense(normalizedLicense, "@{comment}" );
        
		// Create trace entry        
        AuditEntryBuilder aeb = AuditEntryBuilder.instance();
        aeb.withRuleName("License Assignment @{row.rowNumber} - add given NormalizedLicense")
        .withMatching("clientName", "@{clientName}" ) 
        .withMatching("engagementName", "@{engagementName}" )
        .withMatching("name", "@{applicationName}" ) 
        .withMatching("groupId", "@{groupId}" )
        .withMatching("artifactId", "@{artifactId}" )
        .withMatching("version", "@{version}" )
        .withMatching("declaredLicense", "@{declaredLicense}" )
        .withMatching("licenseUrl", "@{url}" )
        .withSetting("normalizedLicenseType", "@{normalizedLicenseType}" )
        .withSetting("normalizedLicense", "@{normalizedLicense}" )
        .withSetting("normalizedLicenseUrl", $licUrl, "taking url from read data" )
        .withSetting("normalizedLicenseUrl", "@{normalizedLicenseUrl}" )
        .withSetting("comment", "@{comment}")
        .nop();
         ModelHelper.appendTraceToNormalizedLicense(normalizedLicense,aeb.build()); 
        
        insert(normalizedLicense);
       
end

end template
