// SPDX-License-Identifier: Apache-2.0

template header
declared
url
type
normalized

package com.devonfw.tools.solicitor.rules;

import com.devonfw.tools.solicitor.model.ModelFactory;
import com.devonfw.tools.solicitor.model.inventory.NormalizedLicense
import com.devonfw.tools.solicitor.model.inventory.RawLicense
import com.devonfw.tools.solicitor.common.AuditEntryBuilder;

template "NameNormalizer"

rule "Name Normalization @{row.rowNumber}" salience -@{row.rowNumber}
agenda-group "LicenseNameMapping"
    when
        $ac : ApplicationComponent()
        $rl : RawLicense(
            specialHandling == false,
        	declaredLicense == "@{declared}", 
        	licenseUrl == "@{url}",
        	$licUrl : licenseUrl,
        	applicationComponent == $ac )
        	not( NormalizedLicense(applicationComponent == $ac, normalizedLicense == "@{normalized}" ) )
    then
        NormalizedLicense normalizedLicense = ModelFactory.newNormalizedLicense($rl ); 
        normalizedLicense.setNormalizedLicenseType("@{type}");
        normalizedLicense.setNormalizedLicense("@{normalized}");
        normalizedLicense.setNormalizedLicenseUrl($licUrl);

		// Create trace entry        
        AuditEntryBuilder aeb = AuditEntryBuilder.instance();
        aeb.withRuleName("Name Normalization @{row.rowNumber}")
        .withMatching("declaredLicense", "@{declared}" )
        .withMatching("licenseUrl", "@{url}" )
        .withSetting("normalizedLicenseType", "@{type}" )
        .withSetting("normalizedLicense", "@{normalized}" )
        .withSetting("normalizedLicenseUrl", $licUrl, "taking data from input" )
        .nop();
        normalizedLicense.appendTrace(aeb.build()); 

        insert(normalizedLicense);
        $rl.setSpecialHandling(true);
        update($rl);
        
end
end template
