/**
 * SPDX-License-Identifier: Apache-2.0
 */

package com.devonfw.tools.solicitor.reader.yarn;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.stereotype.Component;

import com.devonfw.tools.solicitor.common.SolicitorRuntimeException;
import com.devonfw.tools.solicitor.model.inventory.ApplicationComponent;
import com.devonfw.tools.solicitor.model.masterdata.Application;
import com.devonfw.tools.solicitor.model.masterdata.UsagePattern;
import com.devonfw.tools.solicitor.reader.AbstractReader;
import com.devonfw.tools.solicitor.reader.Reader;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

/**
 * A {@link Reader} which reads data generated by
 * <a href="https://classic.yarnpkg.com/en/docs/cli/licenses/">Yarn</a>.
 */

@Component
public class YarnReader extends AbstractReader implements Reader {

    /**
     * The supported type of this {@link Reader}.
     */
    public static final String SUPPORTED_TYPE = "yarn";

    /** {@inheritDoc} */
    @Override
    public Set<String> getSupportedTypes() {

        return Collections.singleton(SUPPORTED_TYPE);
    }

    /** {@inheritDoc} */
    @SuppressWarnings("rawtypes")
    @Override
    public void readInventory(String type, String sourceUrl, Application application, UsagePattern usagePattern,
            String repoType) {

    		//TODO implement an easy check whether the file has been fixed already
        	cutSourceJson(sourceUrl);

    	
        int componentCount = 0;
        int licenseCount = 0;

        // According to tutorial https://github.com/FasterXML/jackson-databind/
        ObjectMapper mapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
        try {
        	//TODO in yarn are only arrays so work with lists 
        	
        	List l = mapper.readValue(inputStreamFactory.createInputStreamFor(sourceUrl), List.class);
            List body = (List) l.get(0);
        	for (int i = 0; i<l.size(); i++) {
                List attributes = (List) l.get(i);
                //Array contents: ["Name","Version","License","URL","VendorUrl","VendorName"]
                String name = (String) attributes.get(0);
                String version = (String) attributes.get(1);
                String repo = (String) attributes.get(4);
                //TODO we dont have a licenseFile or path with yarn

                //String path = (String) attributes.get("LicenseFile");
                //String licenseFile = (String) attributes.get("LicenseFile");
                //String licenseUrl = estimateLicenseUrl(repo, path, licenseFile);
                
                String licenseUrl = repo;
                String homePage = (String) attributes.get(5);

                //TODO yarn only has single licenses 
                String license = (String) attributes.get(3);
                
                /*
                Object lic = attributes.get("licenses");
                List<String> licenseList;
                if (lic != null) {
                    if (lic instanceof List) {
                        licenseList = new ArrayList<>();
                        for (Object entry : (List) lic) {
                            licenseList.add((String) entry);
                        }

                    } else {
                        licenseList = Collections.singletonList((String) lic);
                    }
                } else {
                    licenseList = Collections.emptyList();
                }
*/
                ApplicationComponent appComponent = getModelFactory().newApplicationComponent();
                appComponent.setApplication(application);
                componentCount++;
                String[] module = name.split("@");
                if (name.startsWith("@")) {
                    appComponent.setArtifactId("@" + module[module.length - 2]);
                } else {
                    appComponent.setArtifactId(module[module.length - 2]);
                }
                appComponent.setVersion(module[module.length - 1]);
                appComponent.setUsagePattern(usagePattern);
                appComponent.setGroupId("");
                appComponent.setOssHomepage(homePage);
                appComponent.setRepoType(repoType);
                
                //TODO only needed in case of multiple licenses
                /*
                if (licenseList.isEmpty()) {
                    // add empty raw license if no license info attached
                    addRawLicense(appComponent, null, null, sourceUrl);
                } else {
                    for (String cl : licenseList) {
                        licenseCount++;
                        addRawLicense(appComponent, cl, licenseUrl, sourceUrl);
                    }
                }
                 */
            }
            doLogging(sourceUrl, application, componentCount, licenseCount);
        } catch (IOException e) {
            throw new SolicitorRuntimeException(
                    "Could not read yarn inventory source '" + sourceUrl + "'", e);
        }

    }

    //helper method that transforms the .json created by yarn licenses into a correct form
    private void cutSourceJson(String sourceURL) {
    	sourceURL = sourceURL.replaceAll("file:", "");
    	File input = new File(sourceURL);
    	try {
	    	BufferedReader reader = new BufferedReader(new FileReader(input));
	    	String content ="";
	    	String line = reader.readLine();
	
	    	while (line != null)
	    		{
	    	        content = content + line + System.lineSeparator();			
	    		}
    	    	
    		content = content.split("\\\"body\\\":")[1];
    		content = content.replace("}", "");
    		content = "[" + content + "]";
    		System.out.println("This is the cutted json: " + content);
    	
    		FileWriter writer;
			writer = new FileWriter(input);
			
			writer.write(content);
			
	    	writer.close();
	    	reader.close();
    	} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    private String estimateLicenseUrl(String repo, String path, String licenseFile) {

        if (repo == null || repo.isEmpty()) {
            return null;
        }
        if (path == null || path.isEmpty() || //
                licenseFile == null || licenseFile.isEmpty()) {
            return repo;
        }

        if (repo.contains("github.com") && licenseFile.startsWith(path)) {
            String licenseRelative = licenseFile.replace(path, "").replace("\\", "/");
            if (repo.endsWith("/")) {
                repo = repo.substring(0, repo.length() - 1);
            }
            if (repo.contains("github.com")) {
                return repo.replace("git://", "https://") + "/raw/master" + licenseRelative;
            }
        }
        return repo;
    }

}
