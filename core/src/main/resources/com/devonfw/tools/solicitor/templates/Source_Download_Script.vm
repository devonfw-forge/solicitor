## SPDX-License-Identifier: Apache-2.0
#
# This script was generated by 'Solicitor', v$MODELROOT.getDataRow(0).solicitorVersion ($MODELROOT.getDataRow(0).solicitorGitHash) on $MODELROOT.getDataRow(0).executionTime
# see https://github.com/devonfw/solicitor
# This script downloads the sources for components, which have the "includeSource" flag set to "yes".

#foreach ($artifact in $ARTIFACTS)
# Application: $artifact.applicationName -- Group: $artifact.groupId -- Artifact: $artifact.artifactId -- Version: $artifact.version -- License(s): $artifact.effectiveNormalizedLicense -- includeSource: $artifact.includeSource
	mkdir $artifact.applicationName &> /dev/null
	cd $artifact.applicationName
	#if ( $artifact.packageUrl == "NA" )
		echo "No PackageUrl available: Artifact Group: $artifact.groupId -- Artifact: $artifact.artifactId -- Version: $artifact.version" >> need-to-retrieve-manually.txt
	#else
		#set($sourceArchiveSuffix= ${purlhandler.sourceArchiveSuffixFor($artifact.packageUrl)})	
		#set($prefixToRemove = "pkg-")
		
		#set($fileName= ${purlhandler.pathFor($artifact.packageUrl).replaceAll("/","-")})
		#set($fileName= $fileName+("-sources."))
		#set($fileName= $fileName + $sourceArchiveSuffix)
		#set($fileName = $fileName.substring($prefixToRemove.length()))
		# File name: $fileName
		
			curl -# $purlhandler.sourceDownloadUrlFor($artifact.packageUrl) -o $fileName
			#if ( $sourceArchiveSuffix == "jar" )
			unzip -q -t $fileName
			#elseif($sourceArchiveSuffix == "tgz")
			tar -xvzf $fileName -O > /dev/null
			#elseif($sourceArchiveSuffix == "tar.gz")
			tar -xvzf $fileName -O > /dev/null
			#else
			unzip -q nonexisting
			#end
			if [ $? -ne 0 ]
			then
  				echo "Could not be downloaded: $fileName " >> need-to-retrieve-manually.txt
  				rm $fileName
			fi
	#end
	cd ..
#end
